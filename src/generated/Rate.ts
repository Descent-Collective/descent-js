/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IVault {
  export type RateInfoStruct = {
    rate: BigNumberish;
    accumulatedRate: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type RateInfoStructOutput = [
    rate: bigint,
    accumulatedRate: bigint,
    lastUpdateTime: bigint
  ] & { rate: bigint; accumulatedRate: bigint; lastUpdateTime: bigint };
}

export interface RateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateCurrentAccumulatedRate"
      | "calculateCurrentTotalAccumulatedRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateCurrentAccumulatedRate",
    values: [IVault.RateInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentTotalAccumulatedRate",
    values: [IVault.RateInfoStruct, IVault.RateInfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateCurrentAccumulatedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentTotalAccumulatedRate",
    data: BytesLike
  ): Result;
}

export interface Rate extends BaseContract {
  connect(runner?: ContractRunner | null): Rate;
  waitForDeployment(): Promise<this>;

  interface: RateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateCurrentAccumulatedRate: TypedContractMethod<
    [_rateInfo: IVault.RateInfoStruct],
    [bigint],
    "view"
  >;

  calculateCurrentTotalAccumulatedRate: TypedContractMethod<
    [
      _baseRateInfo: IVault.RateInfoStruct,
      _collateralRateInfo: IVault.RateInfoStruct
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateCurrentAccumulatedRate"
  ): TypedContractMethod<[_rateInfo: IVault.RateInfoStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCurrentTotalAccumulatedRate"
  ): TypedContractMethod<
    [
      _baseRateInfo: IVault.RateInfoStruct,
      _collateralRateInfo: IVault.RateInfoStruct
    ],
    [bigint],
    "view"
  >;

  filters: {};
}
