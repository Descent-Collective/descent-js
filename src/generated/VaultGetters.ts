/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VaultGettersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkHealthFactor"
      | "getCollateralInfo"
      | "getMaxBorrowable"
      | "getMaxWithdrawable"
      | "getVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkHealthFactor",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBorrowable",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWithdrawable",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
}

export interface VaultGetters extends BaseContract {
  connect(runner?: ContractRunner | null): VaultGetters;
  waitForDeployment(): Promise<this>;

  interface: VaultGettersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkHealthFactor: TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [bigint],
    "view"
  >;

  getCollateralInfo: TypedContractMethod<
    [_vaultContract: AddressLike, _collateralToken: AddressLike],
    [[bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getMaxBorrowable: TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [bigint],
    "view"
  >;

  getMaxWithdrawable: TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [bigint],
    "view"
  >;

  getVault: TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkHealthFactor"
  ): TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralInfo"
  ): TypedContractMethod<
    [_vaultContract: AddressLike, _collateralToken: AddressLike],
    [[bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxBorrowable"
  ): TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxWithdrawable"
  ): TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<
    [
      _vaultContract: AddressLike,
      _collateralToken: AddressLike,
      _owner: AddressLike
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  filters: {};
}
