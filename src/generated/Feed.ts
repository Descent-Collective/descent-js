/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export interface FeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'DEFAULT_ADMIN_ROLE'
      | 'collaterals'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'mockUpdatePrice'
      | 'pause'
      | 'renounceRole'
      | 'revokeRole'
      | 'setPriceOracleContract'
      | 'status'
      | 'supportsInterface'
      | 'unpause'
      | 'updatePrice'
      | 'vault',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: 'Read' | 'RoleAdminChanged' | 'RoleGranted' | 'RoleRevoked',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collaterals', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'mockUpdatePrice',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'setPriceOracleContract',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'status', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updatePrice', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collaterals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockUpdatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPriceOracleContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'status', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result;
}

export namespace ReadEvent {
  export type InputTuple = [collateral: AddressLike, price: BigNumberish];
  export type OutputTuple = [collateral: string, price: bigint];
  export interface OutputObject {
    collateral: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Feed extends BaseContract {
  connect(runner?: ContractRunner | null): Feed;
  waitForDeployment(): Promise<this>;

  interface: FeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>;

  collaterals: TypedContractMethod<[arg0: AddressLike], [string], 'view'>;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], 'view'>;

  mockUpdatePrice: TypedContractMethod<
    [collateral: AddressLike, price: BigNumberish],
    [void],
    'nonpayable'
  >;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    'nonpayable'
  >;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;

  setPriceOracleContract: TypedContractMethod<
    [oracle: AddressLike, collateral: AddressLike],
    [void],
    'nonpayable'
  >;

  status: TypedContractMethod<[], [bigint], 'view'>;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  updatePrice: TypedContractMethod<[collateral: AddressLike], [void], 'nonpayable'>;

  vault: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'collaterals',
  ): TypedContractMethod<[arg0: AddressLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getRoleAdmin',
  ): TypedContractMethod<[role: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'grantRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'hasRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'mockUpdatePrice',
  ): TypedContractMethod<[collateral: AddressLike, price: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'pause'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'renounceRole',
  ): TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'revokeRole',
  ): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setPriceOracleContract',
  ): TypedContractMethod<[oracle: AddressLike, collateral: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'status'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'supportsInterface',
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'unpause'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updatePrice',
  ): TypedContractMethod<[collateral: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'vault'): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'Read',
  ): TypedContractEvent<ReadEvent.InputTuple, ReadEvent.OutputTuple, ReadEvent.OutputObject>;
  getEvent(
    key: 'RoleAdminChanged',
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleGranted',
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'RoleRevoked',
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    'Read(address,uint256)': TypedContractEvent<
      ReadEvent.InputTuple,
      ReadEvent.OutputTuple,
      ReadEvent.OutputObject
    >;
    Read: TypedContractEvent<ReadEvent.InputTuple, ReadEvent.OutputTuple, ReadEvent.OutputObject>;

    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
